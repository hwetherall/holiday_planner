This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.gitignore
.npmrc
.railwayignore
apps/backend/.env.example
apps/backend/package.json
apps/backend/prisma/migrations/20250814181644_init/migration.sql
apps/backend/prisma/migrations/migration_lock.toml
apps/backend/prisma/schema.prisma
apps/backend/prisma/seed.ts
apps/backend/src/index.ts
apps/backend/tsconfig.json
apps/frontend/.gitignore
apps/frontend/.npmrc
apps/frontend/app/components/HolidayLoading.tsx
apps/frontend/app/globals.css
apps/frontend/app/layout.tsx
apps/frontend/app/page.tsx
apps/frontend/app/questionnaire/page.tsx
apps/frontend/app/rank/page.tsx
apps/frontend/app/results/page.tsx
apps/frontend/lib/api.ts
apps/frontend/next-env.d.ts
apps/frontend/next.config.js
apps/frontend/package.json
apps/frontend/postcss.config.js
apps/frontend/tailwind.config.js
apps/frontend/tsconfig.json
package.json
packages/shared/index.ts
packages/shared/package.json
pnpm-workspace.yaml
railway.toml
vercel.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
</file>

<file path=".gitignore">
# Dependencies
node_modules/
.pnpm-store/

# Environment variables (protect all secrets)
.env
.env.local
.env.development
.env.test
.env.production
.env.staging
# Allow example files
!.env.example
!.env.local.example

# Build outputs
apps/frontend/.next/
apps/frontend/.vercel/
apps/frontend/out/
apps/backend/dist/

# Testing
coverage/

# OS files
.DS_Store
Thumbs.db

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# Temporary files
*.tmp
*.temp

# Database files
*.db
*.sqlite
*.sqlite3

# SSL certificates
*.pem
*.key
*.crt
*.csr

# API keys and secrets (additional protection)
secrets.json
config/secrets.json
*.secret

.vercel
</file>

<file path=".npmrc">
auto-install-peers=true
strict-peer-dependencies=false
shamefully-hoist=true
</file>

<file path=".railwayignore">
# Frontend files (not needed for backend deployment)
apps/frontend/
family-holiday-planner/

# Development files
node_modules/
.git/
.gitignore
README.md

# Environment files
.env
.env.local
.env.development
.env.test

# Build artifacts
dist/
.next/
build/

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db
</file>

<file path="apps/backend/prisma/migrations/20250814181644_init/migration.sql">
-- CreateTable
CREATE TABLE "Group" (
    "id" TEXT NOT NULL,
    "code" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "pinHash" TEXT NOT NULL,
    "homeAirports" TEXT NOT NULL,
    "members" TEXT NOT NULL,

    CONSTRAINT "Group_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Profile" (
    "id" TEXT NOT NULL,
    "groupId" TEXT NOT NULL,
    "profileJson" JSONB NOT NULL,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Profile_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "CandidateSet" (
    "id" TEXT NOT NULL,
    "groupId" TEXT NOT NULL,
    "cardsJson" JSONB NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "CandidateSet_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Ranking" (
    "id" TEXT NOT NULL,
    "groupId" TEXT NOT NULL,
    "candidateSetId" TEXT NOT NULL,
    "ranking" JSONB NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Ranking_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "FinalPlan" (
    "id" TEXT NOT NULL,
    "briefJson" JSONB NOT NULL,
    "resultJson" JSONB NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "FinalPlan_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Group_code_key" ON "Group"("code");

-- CreateIndex
CREATE UNIQUE INDEX "Profile_groupId_key" ON "Profile"("groupId");

-- AddForeignKey
ALTER TABLE "Profile" ADD CONSTRAINT "Profile_groupId_fkey" FOREIGN KEY ("groupId") REFERENCES "Group"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "CandidateSet" ADD CONSTRAINT "CandidateSet_groupId_fkey" FOREIGN KEY ("groupId") REFERENCES "Group"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Ranking" ADD CONSTRAINT "Ranking_groupId_fkey" FOREIGN KEY ("groupId") REFERENCES "Group"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Ranking" ADD CONSTRAINT "Ranking_candidateSetId_fkey" FOREIGN KEY ("candidateSetId") REFERENCES "CandidateSet"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
</file>

<file path="apps/backend/prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
</file>

<file path="apps/backend/prisma/schema.prisma">
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id        String   @id @default(cuid())
  code      String   @unique // "A"|"B"|"C"|"D"
  name      String
  pinHash   String
  homeAirports String // CSV of IATA codes
  members   String   // CSV of names
  profiles  Profile[]
  rankings  Ranking[]
  candidateSets CandidateSet[]
}

model Profile {
  id         String   @id @default(cuid())
  groupId    String   @unique
  group      Group    @relation(fields: [groupId], references: [id])
  profileJson Json
  updatedAt  DateTime @updatedAt
}

model CandidateSet {
  id         String   @id @default(cuid())
  groupId    String
  group      Group    @relation(fields: [groupId], references: [id])
  cardsJson  Json     // {cards: CandidateCard[]}
  createdAt  DateTime @default(now())
  rankings   Ranking[]
}

model Ranking {
  id              String   @id @default(cuid())
  groupId         String
  group           Group    @relation(fields: [groupId], references: [id])
  candidateSetId  String
  candidateSet    CandidateSet @relation(fields: [candidateSetId], references: [id])
  ranking         Json     // { [cardId]: rankNumber }
  createdAt       DateTime @default(now())
}

model FinalPlan {
  id          String   @id @default(cuid())
  briefJson   Json     // all profiles + rankings snapshot
  resultJson  Json     // { detectedConflicts, options[3], aggregationNote, nextSteps }
  createdAt   DateTime @default(now())
}
</file>

<file path="apps/backend/prisma/seed.ts">
import 'dotenv/config';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
const prisma = new PrismaClient();

async function main(){
  const groups = [
    { code: 'A', name: 'Harry + Ky + Occi', pin: '3112' },
    { code: 'B', name: 'Mum + Johno',       pin: '1002' },
    { code: 'C', name: 'Liv + Ben',         pin: '2810' },
    { code: 'D', name: 'Victoria + Jim',    pin: '0602' },
  ];
  for(const g of groups){
    await prisma.group.upsert({
      where: { code: g.code },
      create: {
        code: g.code,
        name: g.name,
        pinHash: await bcrypt.hash(g.pin, 10),
        homeAirports: g.code==='A'?'DEN':'SYD,MEL',
        members: g.name
      },
      update: {
        // Ensure pins can be corrected by re-running the seed after editing values
        name: g.name,
        pinHash: await bcrypt.hash(g.pin, 10),
        homeAirports: g.code==='A'?'DEN':'SYD,MEL',
        members: g.name
      }
    });
  }
}

main().then(()=>process.exit(0));
</file>

<file path="apps/backend/src/index.ts">
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory of the current file
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load .env from the backend directory (go up from src to backend root)
dotenv.config({ path: path.join(__dirname, '..', '.env') });
console.log('Loading .env from:', path.join(__dirname, '..', '.env'));
import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { v4 as uuid } from 'uuid';
import OpenAI from 'openai';
import { SYSTEM_CARD_MAKER, SYSTEM_CONSENSUS_COMPOSER, GroupProfile, CandidateCard } from '@fhp/shared';

const prisma = new PrismaClient();
const app = express();
app.use(express.json());
app.use(cors({ origin: process.env.ALLOW_ORIGIN?.split(',') ?? '*', credentials: true }));

// Health check endpoint for Railway
app.get('/health', (req: Request, res: Response) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});
const openRouterApiKey = process.env.OPENROUTER_API_KEY;
console.log('Initializing OpenRouter with key:', openRouterApiKey ? `sk-...${openRouterApiKey.slice(-4)}` : 'NOT SET');
const ai: OpenAI | null = openRouterApiKey ? new OpenAI({
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: openRouterApiKey,
}) : null;
console.log('OpenRouter client initialized:', !!ai);
const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';

function auth(req: Request, res: Response, next: NextFunction){
  const h = req.headers.authorization; if(!h) return res.status(401).json({error:'no auth'});
  try{ const t = h.split(' ')[1]; (req as any).user = jwt.verify(t, JWT_SECRET); next(); }catch{ return res.status(401).json({error:'bad token'}); }
}

// --- Auth ---
app.post('/auth/login', async (req: Request, res: Response) => {
  const { groupCode, pin } = req.body as { groupCode: string, pin: string };
  const group = await prisma.group.findUnique({ where: { code: groupCode } });
  if (!group) return res.status(404).json({ error: 'group not found' });
  const ok = await bcrypt.compare(String(pin), group.pinHash);
  if (!ok) return res.status(401).json({ error: 'invalid pin' });
  const token = jwt.sign({ groupId: group.id, groupCode }, JWT_SECRET, { expiresIn: '7d' });
  res.json({ token, group: { id: group.id, code: group.code, name: group.name } });
});

// --- Profile ---
app.post('/profile/upsert', auth, async (req: Request, res: Response) => {
  const { profile } = req.body as { profile: GroupProfile };
  const groupId = (req as any).user.groupId as string;
  const saved = await prisma.profile.upsert({
    where: { groupId },
    update: { profileJson: profile as any },
    create: { groupId, profileJson: profile as any }
  });
  res.json({ ok: true, profile: saved.profileJson });
});

app.get('/profile/me', auth, async (req: Request, res: Response) => {
  const groupId = (req as any).user.groupId as string;
  const p = await prisma.profile.findFirst({ where: { groupId } });
  res.json({ profile: p?.profileJson ?? null });
});

// --- Cards: generate 5 ---
app.post('/cards/generate', auth, async (req: Request, res: Response) => {
  console.log('=== CARDS GENERATE ENDPOINT HIT ===');
  const groupId = (req as any).user.groupId as string;
  console.log('Group ID:', groupId);
  
  const p = await prisma.profile.findFirst({ where: { groupId } });
  console.log('Profile found:', !!p);
  if(!p) return res.status(400).json({ error: 'no profile yet' });

  console.log('AI client status:', ai ? 'initialized' : 'not initialized');
  console.log('OPENAI_API_KEY exists:', !!process.env.OPENAI_API_KEY);
  console.log('OPENAI_API_KEY length:', process.env.OPENAI_API_KEY?.length || 0);

  let cards: CandidateCard[] = [];
  if (!ai) {
    // Mock cards when OPENAI_API_KEY is not set
    cards = [
      {
        id: uuid(),
        title: 'Beach week in Naxos, Greece',
        destinationKey: 'GRC-Naxos',
        facts: ['Family-friendly beaches', 'Walkable old town', 'Ferries from Athens'],
        pitch: 'Slow days on sandy beaches and simple Greek food. Great for mixed ages.',
        imagePrompt: 'Photorealistic coastal village in Naxos, Greece, golden hour, teal water, whitewashed houses',
        assumptions: ['Costs are indicative only']
      },
      {
        id: uuid(),
        title: 'Alpine lakes and cabins — Queenstown',
        destinationKey: 'NZL-Queenstown',
        facts: ['Lake Wakatipu views', 'Day trips to Arrowtown', 'Gondola + easy walks'],
        pitch: 'Cosy base with gentle adventures and postcard views.',
        imagePrompt: 'Photorealistic alpine lake near Queenstown, wooden cabin, snow-capped peaks, winter sun',
        assumptions: ['Weather can vary in shoulder seasons']
      },
      {
        id: uuid(),
        title: 'Tropical rainforest & reef — Cairns/Port Douglas',
        destinationKey: 'AUS-PortDouglas',
        facts: ['Great Barrier Reef access', 'Daintree rainforest', 'Resort-style pools'],
        pitch: 'Easy tropical escape with options for reef or rainforest days.',
        imagePrompt: 'Photorealistic tropical beach near Port Douglas with palm trees and coral blue water',
        assumptions: ['Stinger season requires precautions']
      },
      {
        id: uuid(),
        title: 'City + nature — Vancouver & Whistler combo',
        destinationKey: 'CAN-Vancouver-Whistler',
        facts: ['Sea-to-Sky Highway', 'Family bike paths', 'Gondola viewpoints'],
        pitch: 'Mix urban food with forest walks and mountain vistas.',
        imagePrompt: 'Photorealistic view of Vancouver skyline with mountains, blue sky, Stanley Park seawall',
        assumptions: ['Driving times vary with traffic']
      },
      {
        id: uuid(),
        title: 'Culture and coast — Lisbon & Cascais',
        destinationKey: 'PRT-Lisbon-Cascais',
        facts: ['Trams and tiled streets', 'Day trip to Sintra', 'Atlantic beaches'],
        pitch: 'Sunny city break with easy seaside day trips and great food.',
        imagePrompt: 'Photorealistic Lisbon Alfama rooftops at sunset with yellow tram and river view',
        assumptions: ['Hills and cobblestones in old quarters']
      }
    ];
  } else {
    // AI call with enhanced profile data
    console.log('Generating AI cards for profile:', JSON.stringify(p.profileJson, null, 2));
    
    const userPrompt = `Generate 5 diverse holiday suggestions based on this detailed family profile. Return JSON format: {"cards": CandidateCard[5]}.

GroupProfile data:
${JSON.stringify(p.profileJson, null, 2)}

Focus on:
- Trip length: ${(p.profileJson as any).tripLengthNights} nights
- Available months: ${((p.profileJson as any).occasionGoals || []).join(', ')}
- Budget range: ${(p.profileJson as any).budgetPerAdultUSD ? `$${(p.profileJson as any).budgetPerAdultUSD}` : 'flexible'}
- Adventure level: ${(p.profileJson as any).riskTolerance}/100
- Location preferences: ${((p.profileJson as any).accommodationRank || []).join(', ')}
- Activities: ${((p.profileJson as any).activities || []).join(', ')}
- Deal-breakers: ${((p.profileJson as any).vetoes || []).join(', ')}
- Family dynamics: ${(p.profileJson as any).togetherness}/100 (togetherness preference)
- Special notes: ${(p.profileJson as any).notes || 'None'}

Ensure suggestions honor all vetoes and match the specified preferences.`;

    const completion = await ai.chat.completions.create(
      {
        model: 'meta-llama/llama-4-maverick',
        response_format: { type: 'json_object' },
        messages: [
          { role: 'system', content: SYSTEM_CARD_MAKER },
          { role: 'user', content: userPrompt }
        ]
      },
      {
        headers: {
          'HTTP-Referer': process.env.ALLOW_ORIGIN || 'http://localhost:3000',
          'X-Title': 'Holiday Planner'
        }
      }
    );
    const json = JSON.parse(completion.choices[0].message.content || '{"cards":[]}');
    cards = (json.cards || []).map((c: any) => ({ ...c, id: c.id || uuid() }));
    console.log('Generated AI cards:', cards.map(c => c.title));
  }

  // Optional image attachment via provider (Unsplash or fallback)
  if(process.env.USE_IMAGE_GEN === 'true'){
    const provider = (process.env.IMAGE_PROVIDER || 'unsplash').toLowerCase();
    const unsplashKey = process.env.UNSPLASH_ACCESS_KEY;
    console.log('[images] provider=', provider, 'unsplashKeyPresent=', Boolean(unsplashKey));
    for(const c of cards){
      const query = encodeURIComponent(`${c.title} ${c.destinationKey}`);
      try{
        if(provider === 'unsplash' && unsplashKey){
          const resp = await fetch(`https://api.unsplash.com/search/photos?query=${query}&orientation=landscape&per_page=1`, {
            headers: { Authorization: `Client-ID ${unsplashKey}` }
          });
          const data = await resp.json() as any;
          const url = (data as any)?.results?.[0]?.urls?.regular as string | undefined;
          if(url){ (c as any).imageUrl = url; console.log('[images] matched', c.title, '->', url); continue; }
        }
        // Fallback: source.unsplash without key (best-effort) or picsum-like placeholder by query
        (c as any).imageUrl = `https://source.unsplash.com/featured/1280x720/?${query}`;
        console.log('[images] fallback used for', c.title);
      }catch{
        // ignore - leave without imageUrl
      }
    }
  }

  const saved = await prisma.candidateSet.create({ data: { groupId, cardsJson: { cards } } });
  res.json({ candidateSetId: saved.id, cards });
});

app.get('/cards/latest', auth, async (req: Request, res: Response) => {
  const groupId = (req as any).user.groupId as string;
  const set = await prisma.candidateSet.findFirst({ where: { groupId }, orderBy: { createdAt: 'desc' } });
  res.json({ candidateSetId: set?.id, cards: (set?.cardsJson as any)?.cards ?? [] });
});

// --- Ranking submit ---
app.post('/ranking/submit', auth, async (req: Request, res: Response) => {
  const { candidateSetId, ranking } = req.body as { candidateSetId: string, ranking: Record<string, number> };
  const groupId = (req as any).user.groupId as string;
  // Validate forced ranking 1..5
  const ranks = Object.values(ranking);
  const valid = ranks.length === 5 && new Set(ranks).size === 5 && ranks.every(n => [1,2,3,4,5].includes(Number(n)));
  if(!valid) return res.status(400).json({ error: 'ranking must be 1..5 without ties' });
  await prisma.ranking.create({ data: { groupId, candidateSetId, ranking } });
  res.json({ ok: true });
});

// --- Progress ---
app.get('/status/progress', async (_req: Request, res: Response) => {
  const groups = await prisma.group.findMany({ select: { id: true, code: true } });
  const latestByGroup = await Promise.all(groups.map(async g => {
    const r = await prisma.ranking.findFirst({ where: { groupId: g.id }, orderBy: { createdAt: 'desc' } });
    return { code: g.code, submitted: Boolean(r) };
  }));
  res.json({ progress: latestByGroup });
});

// --- Consensus (after all 4) ---
app.post('/consensus/generate', async (_req: Request, res: Response) => {
  const groups = await prisma.group.findMany();
  const allProfiles = await prisma.profile.findMany();
  const allRankings = await prisma.ranking.findMany({ include: { candidateSet: true } });
  if(groups.length < 4 || allProfiles.length < 4 || allRankings.length < 4){
    return res.status(400).json({ error: 'all groups must submit profile and ranking' });
  }
  const brief = {
    groups: groups.map(g => {
      const p = allProfiles.find(p=>p.groupId===g.id)!;
      return p.profileJson;
    })
  };
  const rankingBundle = allRankings.map(r => ({
    groupCode: groups.find(g=>g.id===r.groupId)!.code,
    candidateSet: r.candidateSet.cardsJson,
    ranking: r.ranking
  }));

  if (!ai) {
    const result: any = {
      detectedConflicts: [],
      options: [
        { destination: { name: 'Naxos, Greece' }, reasonSummary: ['Good weather match'], tradeoffs: ['Ferry transfers'] },
        { destination: { name: 'Queenstown, NZ' }, reasonSummary: ['Scenery + activities'], tradeoffs: ['Cooler temps'] },
        { destination: { name: 'Lisbon & Cascais' }, reasonSummary: ['City + beach mix'], tradeoffs: ['Hills/cobbles'] }
      ],
      aggregationNote: 'Mock consensus due to missing OPENAI_API_KEY',
      nextSteps: ['Pick dates', 'Hold refundable lodging']
    };
    const plan = await prisma.finalPlan.create({ data: { briefJson: { brief, rankingBundle }, resultJson: result } });
    return res.json({ finalPlanId: plan.id, result });
  }

  const userPrompt = JSON.stringify({ brief, rankingBundle });
  const completion = await (ai as OpenAI).chat.completions.create(
    {
      model: 'meta-llama/llama-4-maverick',
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: SYSTEM_CONSENSUS_COMPOSER },
        { role: 'user', content: `Return JSON with keys: detectedConflicts, options (PlanOption[3]), aggregationNote, nextSteps. Input follows as JSON.
${userPrompt}` }
      ]
    },
    {
      headers: {
        'HTTP-Referer': process.env.ALLOW_ORIGIN || 'http://localhost:3000',
        'X-Title': 'Holiday Planner'
      }
    }
  );
  const result = JSON.parse(completion.choices[0].message.content || '{}');
  const plan = await prisma.finalPlan.create({ data: { briefJson: { brief, rankingBundle }, resultJson: result } });
  res.json({ finalPlanId: plan.id, result });
});

app.get('/consensus/latest', async (_req: Request, res: Response) => {
  const plan = await prisma.finalPlan.findFirst({ orderBy: { createdAt: 'desc' } });
  res.json({ finalPlanId: plan?.id, result: plan?.resultJson ?? null });
});

const port = process.env.PORT || 8080;
app.listen(port, () => console.log(`Backend listening on :${port}`));
</file>

<file path="apps/frontend/.gitignore">
.vercel
</file>

<file path="apps/frontend/.npmrc">
auto-install-peers=true
strict-peer-dependencies=false
</file>

<file path="apps/frontend/app/components/HolidayLoading.tsx">
'use client';
import { useState, useEffect } from 'react';

const HOLIDAY_MESSAGES = [
  "🎄 Decking the halls with holiday magic...",
  "❄️ Making a list and checking it twice...",
  "🎁 Wrapping up the perfect destinations...",
  "🦌 Sending the reindeer to scout locations...",
  "🌟 Sprinkling holiday cheer on your options...",
  "🎅 Santa's elves are crafting your itinerary...",
  "🕯️ Lighting the menorah of possibilities...",
  "🎊 Preparing your festive adventure...",
  "🏔️ Carving out snowy mountain paths...",
  "🌊 Mapping coastal holiday havens..."
];

const SNOWFLAKES = ['❄️', '❅', '❆', '❄', '❅', '❆'];

export default function HolidayLoading() {
  const [messageIndex, setMessageIndex] = useState(0);

  // Rotate through holiday messages
  useEffect(() => {
    const interval = setInterval(() => {
      setMessageIndex((prev) => (prev + 1) % HOLIDAY_MESSAGES.length);
    }, 2000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center relative overflow-hidden">
      {/* Falling snowflakes */}
      {Array.from({ length: 20 }, (_, i) => (
        <div
          key={i}
          className="absolute text-xl animate-fall"
          style={{
            left: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 3}s`,
            animationDuration: `${3 + Math.random() * 4}s`
          }}
        >
          {SNOWFLAKES[Math.floor(Math.random() * SNOWFLAKES.length)]}
        </div>
      ))}

      {/* Main loading content */}
      <div className="text-center space-y-8 z-10 relative">
        {/* Christmas Tree */}
        <div className="flex justify-center">
          <div className="relative">
            {/* Tree trunk */}
            <div className="w-4 h-8 bg-amber-800 mx-auto rounded-b"></div>
            {/* Tree layers */}
            <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
              <div className="w-16 h-8 bg-green-600 rounded-t-full"></div>
            </div>
            <div className="absolute bottom-12 left-1/2 transform -translate-x-1/2">
              <div className="w-20 h-8 bg-green-500 rounded-t-full"></div>
            </div>
            <div className="absolute bottom-16 left-1/2 transform -translate-x-1/2">
              <div className="w-24 h-8 bg-green-400 rounded-t-full"></div>
            </div>
            <div className="absolute bottom-20 left-1/2 transform -translate-x-1/2">
              <div className="w-28 h-8 bg-green-300 rounded-t-full"></div>
            </div>
            {/* Star */}
            <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 text-2xl animate-pulse">
              ⭐
            </div>
            {/* Ornaments */}
            <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 -ml-8 text-red-500 animate-bounce">
              🔴
            </div>
            <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 ml-6 text-yellow-500 animate-bounce" style={{animationDelay: '0.5s'}}>
              🟡
            </div>
            <div className="absolute bottom-14 left-1/2 transform -translate-x-1/2 -ml-4 text-blue-500 animate-bounce" style={{animationDelay: '1s'}}>
              🔵
            </div>
          </div>
        </div>

        {/* Loading message */}
        <div className="space-y-4">
          <h2 className="text-3xl font-bold text-gray-800">
            🎄 Crafting Your Perfect Holiday 🎄
          </h2>
          <p className="text-lg text-gray-600 max-w-md mx-auto">
            {HOLIDAY_MESSAGES[messageIndex]}
          </p>
        </div>

        {/* Animated loading bar */}
        <div className="w-64 mx-auto">
          <div className="bg-gray-200 rounded-full h-3 overflow-hidden">
            <div className="h-full rounded-full animate-loading-bar" 
                 style={{
                   background: 'linear-gradient(90deg, #ef4444, #22c55e, #3b82f6, #ef4444)',
                   backgroundSize: '300% 100%'
                 }}>
            </div>
          </div>
        </div>

        {/* Holiday icons */}
        <div className="flex justify-center space-x-4 text-2xl">
          <span className="animate-bounce">🎁</span>
          <span className="animate-bounce" style={{animationDelay: '0.2s'}}>🦌</span>
          <span className="animate-bounce" style={{animationDelay: '0.4s'}}>🎅</span>
          <span className="animate-bounce" style={{animationDelay: '0.6s'}}>❄️</span>
          <span className="animate-bounce" style={{animationDelay: '0.8s'}}>🌟</span>
        </div>
      </div>

      <style jsx>{`
        @keyframes loading-bar {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        
        @keyframes fall {
          0% {
            transform: translateY(-10vh) rotate(0deg);
            opacity: 1;
          }
          100% {
            transform: translateY(110vh) rotate(360deg);
            opacity: 0.3;
          }
        }
        
        .animate-loading-bar {
          animation: loading-bar 2s ease-in-out infinite;
        }
        
        .animate-fall {
          animation: fall linear infinite;
        }
      `}</style>
    </div>
  );
}
</file>

<file path="apps/frontend/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --bg: 240 4% 97%;
}

html, body { height: 100%; }
body { background-color: hsl(var(--bg)); }
</file>

<file path="apps/frontend/app/layout.tsx">
import './globals.css';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en"><body className="min-h-screen bg-emerald-50 text-zinc-900">{children}</body></html>
  );
}
</file>

<file path="apps/frontend/app/page.tsx">
'use client';
import { useState } from 'react';
import { api, setToken } from '../lib/api';

export default function Page(){
  const [groupCode, setGroupCode] = useState('A');
  const [pin, setPin] = useState('');
  const [token, setTok] = useState<string|undefined>();

  async function login(){
    const r = await api.post('/auth/login', { groupCode, pin });
    setTok(r.data.token); setToken(r.data.token);
    window.location.href = '/questionnaire';
  }

  return (
    <main className="max-w-md mx-auto py-16 space-y-6">
      <h1 className="text-3xl font-bold">Holiday Genie ✈️</h1>
      <p className="text-sm opacity-70">Enter your group and 4‑digit PIN to begin.</p>
      <div className="space-y-3">
        <label className="block text-sm">Group</label>
        <select value={groupCode} onChange={e=>setGroupCode(e.target.value)} className="w-full rounded-lg p-2 border">
          <option value="A">A — Harry, Ky, Occi</option>
          <option value="B">B — Mum + Johno</option>
          <option value="C">C — Liv + Ben</option>
          <option value="D">D — Victoria + Jim</option>
        </select>
      </div>
      <div className="space-y-3">
        <label className="block text-sm">PIN</label>
        <input value={pin} onChange={e=>setPin(e.target.value)} inputMode="numeric" maxLength={4} className="w-full rounded-lg p-2 border" />
      </div>
      <button onClick={login} className="rounded-xl px-4 py-2 bg-emerald-600 text-white">Start</button>
    </main>
  );
}
</file>

<file path="apps/frontend/app/results/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { api } from '../../lib/api';

export default function Page(){
  const [progress, setProgress] = useState<{code:string,submitted:boolean}[]>([]);
  const [result, setResult] = useState<any>(null);

  async function load(){
    const p = await api.get('/status/progress');
    setProgress(p.data.progress);
    const allDone = p.data.progress.every((x:any)=>x.submitted);
    if(allDone){
      const r = await api.post('/consensus/generate', {});
      setResult(r.data.result);
    }
  }
  useEffect(()=>{ load(); },[]);

  return (
    <main className="max-w-4xl mx-auto py-8 space-y-6">
      <h1 className="text-2xl font-bold">Step 3 — Final Suggestions</h1>
      <div className="p-4 rounded-xl bg-white shadow">
        <h2 className="font-semibold mb-2">Submission progress</h2>
        <ul className="flex gap-4">
          {progress.map(p=> (
            <li key={p.code} className={p.submitted? 'text-emerald-700' : 'text-zinc-500'}>
              Group {p.code}: {p.submitted? '✓' : '⏳'}
            </li>
          ))}
        </ul>
      </div>
      {result && (
        <section className="space-y-4">
          <h2 className="text-xl font-semibold">Top 3</h2>
          {result.options?.map((opt:any, i:number)=> (
            <div key={i} className="rounded-2xl overflow-hidden shadow bg-white">
              <div className="aspect-video bg-emerald-200 flex items-center justify-center">
                <span className="p-4 text-center text-emerald-900">{opt.destination?.name}</span>
              </div>
              <div className="p-4 space-y-2">
                <h3 className="font-semibold text-lg">Option {i+1}: {opt.destination?.name}</h3>
                <ul className="list-disc pl-5 text-sm">
                  {opt.reasonSummary?.slice(0,4).map((f:string,idx:number)=>(<li key={idx}>{f}</li>))}
                </ul>
                <p className="text-sm opacity-80">Trade‑offs: {opt.tradeoffs?.join('; ')}</p>
              </div>
            </div>
          ))}
        </section>
      )}
    </main>
  );
}
</file>

<file path="apps/frontend/lib/api.ts">
import axios from 'axios';
const base = process.env.NEXT_PUBLIC_API_BASE!;
export const api = axios.create({ baseURL: base });

// Initialize token from localStorage on the client (persists across reloads)
if (typeof window !== 'undefined') {
  const existing = window.localStorage.getItem('fhp_token');
  if (existing) {
    api.defaults.headers.common['Authorization'] = `Bearer ${existing}`;
  }
}

export function setToken(token?: string){
  if (token) {
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    if (typeof window !== 'undefined') {
      window.localStorage.setItem('fhp_token', token);
    }
  } else {
    delete (api.defaults.headers.common as any)['Authorization'];
    if (typeof window !== 'undefined') {
      window.localStorage.removeItem('fhp_token');
    }
  }
}
</file>

<file path="apps/frontend/next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
</file>

<file path="apps/frontend/next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  transpilePackages: ['@fhp/shared'],
};

export default nextConfig;
</file>

<file path="apps/frontend/package.json">
{
  "name": "fhp-frontend",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@fhp/shared": "workspace:*",
    "axios": "^1.7.2",
    "clsx": "^2.1.1",
    "next": "^14.2.5",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.10",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/react": "19.1.10",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.41",
    "typescript": "^5.4.5"
  }
}
</file>

<file path="apps/frontend/postcss.config.js">
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;
</file>

<file path="apps/frontend/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    './app/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}'
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

export default config;
</file>

<file path="apps/frontend/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "jsx": "preserve",
    "moduleResolution": "Bundler",
    "baseUrl": ".",
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "types": [
      "node"
    ],
    "allowJs": true,
    "noEmit": true,
    "incremental": true,
    "isolatedModules": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path="package.json">
{
  "name": "holiday-planner",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "build": "pnpm install && cd apps/backend && pnpm build",
    "start": "cd apps/backend && pnpm start",
    "dev": "cd apps/frontend && pnpm dev"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
</file>

<file path="packages/shared/index.ts">
export type GroupId = "A"|"B"|"C"|"D";

export interface GroupProfile {
  groupId: GroupId;
  members: string[];
  homeAirports: string[]; // IATA
  budgetPerAdultUSD?: number;
  budgetFlex: "firm"|"soft";
  earliestStart: string; // ISO date
  earliestFlexDays: number;
  latestEnd: string; // ISO date
  latestFlexDays: number;
  tripLengthNights: number;
  pace: "chilled"|"balanced"|"packed";
  accommodationRank: string[]; // ranked list
  activities: string[];
  vetoes: string[]; // >=1
  mustHaves: string[]; // >=2
  travelEndurance: { maxFlightHrs?: number; maxFlightCount?: number; maxArrivalDriveHrs?: number };
  kidNeeds: string[];
  accessibilityNeeds: string[];
  climatePref: "warm"|"mild"|"cool"|"snow";
  foodConstraints: string[];
  togetherness: number; // 0–100
  privacyTolerance: number; // 0–100
  occasionGoals: string[];
  riskTolerance: number; // 0–100
  flexibility: number; // 0–10
  notes?: string;
}

export type CandidateCard = {
  id: string;                 // uuid
  title: string;              // "Weeklong beach holiday in Naxos, Greece"
  destinationKey: string;     // e.g., "GRC-Naxos"
  facts: string[];            // 3–6 bullets
  pitch: string;              // 1–3 short sentences
  imagePrompt: string;        // for AI image generation
  assumptions: string[];      // e.g., "prices are estimates"
};

export interface PlanOption {
  destination: {
    name: string;
    country?: string;
  };
  scoreBreakdown: Record<GroupId, number>; // 0–100
  consensusScore: number; // 0–100
  reasonSummary: string[];
  tradeoffs: string[];
  sampleDates: { start: string; end: string }[];
  exampleItinerary: string[];
  budgetSummaryUSD: {
    flightsPerAdult?: string; // qualitative range only
    lodgingPerNight?: string; // qualitative range only
    totalPerGroup?: Record<GroupId, string>;
  };
}

export const SYSTEM_CARD_MAKER = `You are Holiday Genie — Card Maker.
Input: Detailed GroupProfile with preferences, budget, adventure level, location types, activities, vetoes, available months, family dynamics, and special notes.
Output: EXACTLY 5 diverse holiday cards that perfectly match the profile's preferences and honor all constraints.

Key requirements:
- Honor ALL vetoes (deal-breakers) - never suggest anything they've ruled out
- Match their adventure level (1-5 scale converted to 0-100)  
- Consider their budget range and available months
- Include their preferred location types (Beach, Mountains, Big City, etc.)
- Incorporate their activity preferences
- Respect family dynamics preference (independent vs together time)
- Consider special notes for accessibility, dietary needs, etc.
- Remain plausible for multi-origin family (DEN, SYD, MEL home airports)

For each card, return: title, 3–6 facts, a 1–3 sentence pitch, assumptions, and a photorealistic imagePrompt (no text in image).
No duplicate destinations; ensure variety in climates/paces. Use qualitative cost language matching their budget tier.`;

export const SYSTEM_CONSENSUS_COMPOSER = `You are Holiday Genie — Consensus Composer.
Inputs: four GroupProfiles + their 5-card candidate sets and forced rankings.
Use Borda count (scores 5..1) as a preference signal. Respect vetoes/endurance caps.
You MAY suggest new destinations if they better satisfy combined constraints.
Return EXACTLY 3 final suggestions with: new imagePrompt, per-group fit notes, explicit trade-offs, and a short pitch.
Add an aggregationNote explaining how rankings + constraints were reconciled.`;
</file>

<file path="packages/shared/package.json">
{
  "name": "@fhp/shared",
  "version": "0.1.0",
  "main": "index.ts",
  "type": "module"
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - 'apps/*'
  - 'packages/*'
</file>

<file path="vercel.json">
{
  "buildCommand": "cd apps/frontend && pnpm build",
  "installCommand": "pnpm install",
  "framework": "nextjs",
  "outputDirectory": "apps/frontend/.next"
}
</file>

<file path="apps/backend/.env.example">
DATABASE_URL=postgresql://username:password@host:port/database?sslmode=require
JWT_SECRET=your-super-secret-jwt-key-here
ALLOW_ORIGIN=http://localhost:3000
OPENROUTER_API_KEY=your-openrouter-api-key-here

# Images
USE_IMAGE_GEN=true
IMAGE_PROVIDER=unsplash
UNSPLASH_ACCESS_KEY=your-unsplash-access-key-here
</file>

<file path="apps/backend/package.json">
{
  "name": "fhp-backend",
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "tsx src/index.ts",
    "build": "prisma generate --schema=./prisma/schema.prisma",
    "prestart": "prisma generate --schema=./prisma/schema.prisma && prisma migrate deploy --schema=./prisma/schema.prisma",
    "start": "tsx src/index.ts",
    "prisma:generate": "prisma generate --schema=./prisma/schema.prisma",
    "prisma:migrate": "prisma migrate deploy --schema=./prisma/schema.prisma",
    "prisma:migrate:dev": "prisma migrate dev --schema=./prisma/schema.prisma",
    "seed": "tsx prisma/seed.ts"
  },
  "dependencies": {
    "@fhp/shared": "workspace:*",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "openai": "^4.56.0",
    "prisma": "^5.18.0",
    "@prisma/client": "^5.18.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "tsx": "^4.19.0",
    "typescript": "^5.4.5",
    "@types/express": "^4.17.21",
    "@types/cors": "^2.8.17",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/bcryptjs": "^2.4.6",
    "@types/uuid": "^9.0.7",
    "@types/node": "^20.14.10"
  }
}
</file>

<file path="apps/backend/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020"],
    "module": "ES2022",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "strict": true,
    "outDir": "dist",
    "resolveJsonModule": true,
    "declaration": false,
    "sourceMap": false
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="apps/frontend/app/questionnaire/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { api } from '../../lib/api';
import type { GroupProfile } from '@fhp/shared';
import HolidayLoading from '../components/HolidayLoading';

const blank: GroupProfile = {
  groupId: 'A', members: [], homeAirports: [], budgetFlex: 'soft',
  earliestStart: '', earliestFlexDays: 0, latestEnd: '', latestFlexDays: 0,
  tripLengthNights: 7, pace: 'balanced', accommodationRank: [], activities: [],
  vetoes: [], mustHaves: [], travelEndurance: {}, kidNeeds: [], accessibilityNeeds: [],
  climatePref: 'mild', foodConstraints: [], togetherness: 70, privacyTolerance: 60,
  occasionGoals: [], riskTolerance: 50, flexibility: 5
};

const MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const LOCATION_TYPES = ['Beach', 'Mountains', 'Snow/Skiing', 'Big City', 'Small Town', 'National Parks', 'Islands', 'Desert', 'Forest/Lakes', 'Wine Country'];

const ACTIVITY_OPTIONS = ['Museums/Culture', 'Outdoor Adventures', 'Food & Dining', 'Nightlife', 'Shopping', 'Wildlife/Safaris', 'Water Sports', 'Hiking/Walking', 'Photography', 'Festivals/Events'];

const VETO_OPTIONS = ['Long flights (8+ hrs)', 'Extreme heat (35°C+)', 'Extreme cold', 'High altitude', 'Crowds/tourists', 'Language barriers', 'Expensive destinations', 'Remote locations', 'Political instability', 'Poor infrastructure'];

export default function Page(){
  const [profile, setProfile] = useState<GroupProfile>(blank);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [customVeto, setCustomVeto] = useState('');
  const [availableMonths, setAvailableMonths] = useState<string[]>([]);
  const [locationPrefs, setLocationPrefs] = useState<string[]>([]);
  const [activityPrefs, setActivityPrefs] = useState<string[]>([]);
  const [adventurousness, setAdventurousness] = useState(3);
  const [budgetRange, setBudgetRange] = useState(3);
  const [groupDynamics, setGroupDynamics] = useState(3);

  useEffect(()=>{ (async()=>{
    const r = await api.get('/profile/me');
    if(r.data.profile) {
      const p = r.data.profile;
      setProfile(p);
      setAvailableMonths(p.occasionGoals || []);
      setLocationPrefs(p.accommodationRank || []);
      setActivityPrefs(p.activities || []);
      setAdventurousness(p.riskTolerance ? Math.round(p.riskTolerance / 20) : 3);
      setBudgetRange(p.budgetPerAdultUSD ? Math.min(5, Math.max(1, Math.round(p.budgetPerAdultUSD / 1000))) : 3);
      setGroupDynamics(p.togetherness ? Math.round(p.togetherness / 20) : 3);
    }
    setLoading(false);
  })(); },[]);

  function toggleMonth(month: string) {
    setAvailableMonths(prev => 
      prev.includes(month) ? prev.filter(m => m !== month) : [...prev, month]
    );
  }

  function toggleLocation(location: string) {
    setLocationPrefs(prev => 
      prev.includes(location) ? prev.filter(l => l !== location) : [...prev, location]
    );
  }

  function toggleActivity(activity: string) {
    setActivityPrefs(prev => 
      prev.includes(activity) ? prev.filter(a => a !== activity) : [...prev, activity]
    );
  }

  function toggleVeto(veto: string) {
    setProfile(prev => ({
      ...prev,
      vetoes: prev.vetoes.includes(veto) ? prev.vetoes.filter(v => v !== veto) : [...prev.vetoes, veto]
    }));
  }

  function addCustomVeto() {
    if (customVeto.trim()) {
      setProfile(prev => ({
        ...prev,
        vetoes: [...prev.vetoes, customVeto.trim()]
      }));
      setCustomVeto('');
    }
  }

  async function save(){
    if(profile.vetoes.length < 1){
      alert('Please select at least 1 veto.'); return;
    }
    if(availableMonths.length < 1){
      alert('Please select at least 1 available month.'); return;
    }

    const updatedProfile = {
      ...profile,
      occasionGoals: availableMonths,
      accommodationRank: locationPrefs,
      activities: activityPrefs,
      riskTolerance: adventurousness * 20,
      budgetPerAdultUSD: budgetRange * 1000,
      togetherness: groupDynamics * 20,
      mustHaves: [] // Removed as covered by other fields
    };

    await api.post('/profile/upsert', { profile: updatedProfile });
    setGenerating(true);
    try{
      // Immediately generate ideas so Rank page is ready
      await api.post('/cards/generate', {});
    }catch{
      // ignore; Rank page can trigger generation if needed
    }
    window.location.href = '/rank';
  }

  if(loading) return <main className="p-8">Loading…</main>;
  if(generating) return <HolidayLoading />;

  return (
    <main className="max-w-2xl mx-auto py-8 space-y-8">
      <div>
        <h1 className="text-2xl font-bold">Step 1 — Family Holiday Questionnaire</h1>
        <p className="opacity-70 mt-2">Help us find the perfect holiday for everyone. Keep it quick; you can edit later.</p>
      </div>

      {/* Trip Length Slider */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">Trip length: {profile.tripLengthNights} nights</label>
        <input 
          type="range" 
          min="4" 
          max="14" 
          value={profile.tripLengthNights} 
          onChange={e=>setProfile({...profile, tripLengthNights: Number(e.target.value)})} 
          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>4 days</span>
          <span>14 days</span>
        </div>
      </section>

      {/* Available Months */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">When are you available? (Select all that work)</label>
        <div className="grid grid-cols-3 gap-2">
          {MONTHS.map(month => (
            <label key={month} className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={availableMonths.includes(month)}
                onChange={() => toggleMonth(month)}
                className="rounded"
              />
              <span className="text-sm">{month}</span>
            </label>
          ))}
        </div>
      </section>

      {/* Adventurousness Scale */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">Holiday style: {['Super relaxed', 'Mostly relaxed', 'Balanced', 'Quite adventurous', 'Very adventurous'][adventurousness - 1]}</label>
        <input 
          type="range" 
          min="1" 
          max="5" 
          value={adventurousness} 
          onChange={e=>setAdventurousness(Number(e.target.value))} 
          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>Relaxation</span>
          <span>Adventure</span>
        </div>
      </section>

      {/* Location Preferences */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">What locations appeal to you? (Select all that interest you)</label>
        <div className="grid grid-cols-2 gap-2">
          {LOCATION_TYPES.map(location => (
            <label key={location} className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={locationPrefs.includes(location)}
                onChange={() => toggleLocation(location)}
                className="rounded"
              />
              <span className="text-sm">{location}</span>
            </label>
          ))}
        </div>
      </section>

      {/* Activity Preferences */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">What activities interest you? (Select all that apply)</label>
        <div className="grid grid-cols-2 gap-2">
          {ACTIVITY_OPTIONS.map(activity => (
            <label key={activity} className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={activityPrefs.includes(activity)}
                onChange={() => toggleActivity(activity)}
                className="rounded"
              />
              <span className="text-sm">{activity}</span>
            </label>
          ))}
        </div>
      </section>

      {/* Budget Range */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">Budget range per adult: {['Budget-friendly ($1-2k)', 'Moderate ($2-3k)', 'Comfortable ($3-4k)', 'Premium ($4-5k)', 'Luxury ($5k+)'][budgetRange - 1]}</label>
        <input 
          type="range" 
          min="1" 
          max="5" 
          value={budgetRange} 
          onChange={e=>setBudgetRange(Number(e.target.value))} 
          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>Budget</span>
          <span>Luxury</span>
        </div>
      </section>

      {/* Group Dynamics */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">Family time preference: {['Lots of independent time', 'Some separate activities', 'Mix of together/apart', 'Mostly together', 'Always together'][groupDynamics - 1]}</label>
        <input 
          type="range" 
          min="1" 
          max="5" 
          value={groupDynamics} 
          onChange={e=>setGroupDynamics(Number(e.target.value))} 
          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>Independent</span>
          <span>Together</span>
        </div>
      </section>

      {/* Vetoes */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">Deal-breakers (Select any that apply)</label>
        <div className="grid grid-cols-1 gap-2">
          {VETO_OPTIONS.map(veto => (
            <label key={veto} className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox" 
                checked={profile.vetoes.includes(veto)}
                onChange={() => toggleVeto(veto)}
                className="rounded"
              />
              <span className="text-sm">{veto}</span>
            </label>
          ))}
        </div>
        <div className="flex gap-2 mt-3">
          <input 
            value={customVeto}
            onChange={e=>setCustomVeto(e.target.value)}
            placeholder="Add your own deal-breaker..."
            className="border rounded p-2 flex-1"
            onKeyPress={e => e.key === 'Enter' && addCustomVeto()}
          />
          <button 
            onClick={addCustomVeto}
            className="px-3 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
          >
            Add
          </button>
        </div>
        {profile.vetoes.filter(v => !VETO_OPTIONS.includes(v)).map(veto => (
          <div key={veto} className="flex items-center justify-between bg-gray-100 p-2 rounded">
            <span className="text-sm">{veto}</span>
            <button 
              onClick={() => toggleVeto(veto)}
              className="text-red-500 hover:text-red-700 text-sm"
            >
              Remove
            </button>
          </div>
        ))}
      </section>

      {/* Free-form Notes */}
      <section className="space-y-3">
        <label className="block text-sm font-medium">Additional notes or special requirements</label>
        <textarea 
          value={profile.notes || ''} 
          onChange={e=>setProfile({...profile, notes: e.target.value})}
          placeholder="Anything else we should consider? Accessibility needs, dietary requirements, special occasions..."
          className="border rounded p-3 w-full h-24 resize-none"
        />
      </section>

      <button onClick={save} className="w-full rounded-xl px-4 py-3 bg-emerald-600 text-white font-medium hover:bg-emerald-700">
        Save & Continue → Generate Holiday Ideas
      </button>
    </main>
  );
}
</file>

<file path="apps/frontend/app/rank/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { api } from '../../lib/api';
import type { CandidateCard } from '@fhp/shared';
import HolidayLoading from '../components/HolidayLoading';

export default function Page(){
  const [cards, setCards] = useState<CandidateCard[]>([]);
  const [candidateSetId, setSetId] = useState<string>('');
  const [ranks, setRanks] = useState<Record<string, number>>({});
  const [loading, setLoading] = useState(true);

  async function loadExistingCards(){
    const curr = await api.get('/cards/latest');
    if(curr.data.cards?.length===5){ 
      setCards(curr.data.cards); 
      setSetId(curr.data.candidateSetId); 
      setLoading(false); 
      return true; 
    }
    return false;
  }

  async function generateNewCards(){
    setLoading(true);
    const r = await api.post('/cards/generate', {});
    setCards(r.data.cards); 
    setSetId(r.data.candidateSetId); 
    setLoading(false);
  }

  async function ensureCards(){
    const hasExisting = await loadExistingCards();
    if (!hasExisting) {
      await generateNewCards();
    }
  }

  useEffect(()=>{ ensureCards(); },[]);

  function setRank(id:string, val:number){ setRanks(prev=>({ ...prev, [id]: val })); }

  async function submit(){
    if(Object.keys(ranks).length!==5) return alert('Please rank all 5 cards (1–5).');
    const values = Object.values(ranks);
    if(new Set(values).size!==5 || values.some(v=>v<1||v>5)) return alert('Ranks must be 1–5 with no ties.');
    await api.post('/ranking/submit', { candidateSetId, ranking: ranks });
    window.location.href = '/results';
  }

  if(loading) return <HolidayLoading />;

  return (
    <main className="max-w-5xl mx-auto py-8 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Step 2 — Rank Your 5 Ideas</h1>
        <button 
          onClick={generateNewCards}
          disabled={loading}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
        >
          {loading ? 'Generating...' : 'Generate New Ideas'}
        </button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {cards.map(c=> (
          <div key={c.id} className="rounded-2xl overflow-hidden shadow bg-white">
            <div className="aspect-video bg-emerald-200">
              {(c as any).imageUrl ? (
                // eslint-disable-next-line @next/next/no-img-element
                <img src={(c as any).imageUrl} alt={c.title} className="w-full h-full object-cover" />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  <span className="p-4 text-center text-emerald-900">{c.destinationKey}</span>
                </div>
              )}
            </div>
            <div className="p-4 space-y-2">
              <h3 className="font-semibold text-lg">{c.title}</h3>
              <ul className="list-disc pl-5 text-sm">
                {c.facts.slice(0,4).map((f,i)=>(<li key={i}>{f}</li>))}
              </ul>
              <p className="text-sm opacity-80">{c.pitch}</p>
              <div className="pt-2">
                <label className="text-sm mr-2">Rank (1 best • 5 worst)</label>
                <select value={ranks[c.id]||''} onChange={e=>setRank(c.id, Number(e.target.value))} className="border rounded p-2">
                  <option value="">Select…</option>
                  {[1,2,3,4,5].map(n=> <option key={n} value={n}>{n}</option>)}
                </select>
              </div>
            </div>
          </div>
        ))}
      </div>
      <button onClick={submit} className="rounded-xl px-4 py-2 bg-emerald-600 text-white">Submit ranking</button>
    </main>
  );
}
</file>

<file path="railway.toml">
[build]
builder = "nixpacks"

[deploy]
startCommand = "cd apps/backend && pnpm start"
healthcheckPath = "/health"
healthcheckTimeout = 300

[[services]]
name = "backend"

[build.environment]
PRISMA_SCHEMA_PATH = "apps/backend/prisma/schema.prisma"

[nixpacks]
startCmd = "cd apps/backend && pnpm start"
</file>

</files>
